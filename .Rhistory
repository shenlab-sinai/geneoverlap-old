gv2 <- c("B", "C")
manual.contbl <- matrix(c(7, 1, 1, 1), nrow=2)
fish.res <- fisher.test(manual.contbl, alternative="greater")
gsetA <- list(A=gv1)
gsetB <- list(B=gv2)
gom.obj <- newGOM(gsetA, gsetB, genome.size=10)
gom.obj
gom.obj[1, 1]
go.obj <- newGeneOverlap(gv1, gv2, genome.size=10)
go.obj
source('~/Dropbox/code/R/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlapMatrix()
data()
help(trees)
help(women)
women
data(women)
source('~/Dropbox/code/R/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlap()
library("RUnit", lib.loc="/home/lishen/R/x86_64-pc-linux-gnu-library/3.0")
test_GeneOverlap()
test_GeneOverlapMatrix()
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlapMatrix.R')
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
test_GeneOverlapMatrix()
source('~/Dropbox/code/R/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlap()
unique(as.character(c("A", NA, "B")))
length(unique(as.character(c("A", NA, "B"))))
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
test_GeneOverlap()
source('~/Dropbox/code/R/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlap()
source('~/Dropbox/code/R/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlapMatrix()
setwd("~/Dump/ENCODE/geneoverlap_data/rnaseq")
dir()
read.delim("Ensembl2refseq_gene_biotype_and_description.txt") -> gene.hg19.biotype
View(gene.hg19.biotype)
summary(gene.hg19.biotype$Biotype)
rnaseq.genes.fpkm <- read.delim("genes.fpkm_tracking")
View(rnaseq.genes.fpkm)
subset(gene.hg19.biotype, Biotype=="protein_coding") -> gene.hg19.coding
subset(rnaseq.genes.fpkm, gene_id %in% gene.hg19.coding$Ensembl_id) -> rnaseq.genes.coding.fpkm
names(rnaseq.genes.coding.fpkm)
summary(rnaseq.genes.coding.fpkm$FPKM_status)
subset(rnaseq.genes.coding.fpkm, FPKM_status == "HIDATA")
View(subset(rnaseq.genes.coding.fpkm, FPKM_status == "LOWDATA"))
View(subset(rnaseq.genes.coding.fpkm, FPKM_status == "FAIL"))
subset(rnaseq.genes.coding.fpkm, FPKM_status=="OK") -> rnaseq.genes.coding.fpkm.OK
summary(rnaseq.genes.coding.fpkm.OK$FPKM)
hist(log10(rnaseq.genes.coding.fpkm.OK$FPKM) + 1, breaks=100)
hist(log10(rnaseq.genes.coding.fpkm.OK$FPKM + 1), breaks=100)
mean(rnaseq.genes.coding.fpkm.OK$FPKM == 0)
mean(rnaseq.genes.coding.fpkm.OK$FPKM <= .1)
mean(rnaseq.genes.coding.fpkm.OK$FPKM > .1 & rnaseq.genes.coding.fpkm.OK <= 10)
mean(rnaseq.genes.coding.fpkm.OK$FPKM > .1 & rnaseq.genes.coding.fpkm.OK$FPKM <= 10)
mean(rnaseq.genes.coding.fpkm.OK$FPKM <= 1)
mean(rnaseq.genes.coding.fpkm.OK$FPKM > 1 & rnaseq.genes.coding.fpkm.OK$FPKM <= 10)
mean(rnaseq.genes.coding.fpkm.OK$FPKM > 10)
nrow(rnaseq.genes.coding.fpkm.OK)
rnaseq.genes.coding.fpkm.OK[rnaseq.genes.coding.fpkm.OK$FPKM <= 1, ] -> genes.low
rnaseq.genes.coding.fpkm.OK[rnaseq.genes.coding.fpkm.OK$FPKM > 1 & rnaseq.genes.coding.fpkm.OK$FPKM <= 10, ] -> genes.medium
rnaseq.genes.coding.fpkm.OK[rnaseq.genes.coding.fpkm.OK$FPKM > 10, ] -> genes.high
hESC.RNASeq.list <- list("Exp High"=genes.high$gene_short_name, "Exp Medium"=genes.medium$gene_short_name, "Exp Low"=genes.low$gene_short_name)
sapply(hESC.RNASeq.list, length)
setwd("~/Dump/ENCODE/geneoverlap_data/chipseq")
str(hESC.RNASeq.list)
lapply(hESC.RNASeq.list, as.character) -> hESC.RNASeq.list.2
str(hESC.RNASeq.list.2)
hESC.RNASeq.list.2 -> hESC.RNASeq.list
rm(hESC.RNASeq.list.2)
str(hESC.RNASeq.list)
source('~/Dump/ENCODE/geneoverlap_data/chipseq/ChIPSeqList.R')
ChIPSeqList("hesc.H3k27me3.Rep1_peaks.bed.annotated") -> k27m3.gene.names
str(k27m3.gene.names)
hESC.ChIPSeq.list <- list(H3K4me3=ChIPSeqList("hesc.H3k4me3.Rep1_peaks.bed.annotated"),)
hESC.ChIPSeq.list <- list(H3K4me3=ChIPSeqList("hesc.H3k4me3.Rep1_peaks.bed.annotated"),
H3K9me3=ChIPSeqList("hesc.H3k9me3.Rep1.sam_peaks.bed.annotated"),
H3K27me3=ChIPSeqList("hesc.H3k9me3.Rep1.sam_peaks.bed.annotated"),
H3K36me3=ChIPSeqList("hesc.H3k36me3.Rep1.sam_peaks.bed.annotated"))
sapply(hESC.ChIPSeq.list, length)
hESC.ChIPSeq.list <- list(H3K4me3=ChIPSeqList("hesc.H3k4me3.Rep1_peaks.bed.annotated"),
H3K9me3=ChIPSeqList("hesc.H3k9me3.Rep1.sam_peaks.bed.annotated"),
H3K27me3=ChIPSeqList("hesc.H3k27me3.Rep1.sam_peaks.bed.annotated"),
H3K36me3=ChIPSeqList("hesc.H3k36me3.Rep1.sam_peaks.bed.annotated"))
source('~/.active-rstudio-document')
sapply(hESC.ChIPSeq.list, length)
setwd("~/Dropbox/code/R/GeneOverlap")
save(hESC.RNASeq.list, hESC.ChIPSeq.list, file="data/GeneOverlap.RData")
genome.size.basedOnCufflinks <- nrow(rnaseq.genes.coding.fpkm.OK)
genome.size.basedOnCufflinks
save(hESC.RNASeq.list, hESC.ChIPSeq.list, genome.size.basedOnCufflinks, file="data/GeneOverlap.RData")
newGeneOverlap(hESC.ChIPSeq.list$H3K4me3, hESC.RNASeq.list$"Exp High", genome.size.basedOnCufflinks) -> tmp.k4.high
tmp.k4.high
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlapMatrix.R')
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
tmp.k4.high
testGeneOverlap(tmp.k4.high) -> tmp.k4.high
tmp.k4.high
print(tmp.k4.high)
newGeneOverlap(hESC.ChIPSeq.list$H3K4me3, hESC.RNASeq.list$"Exp Low", genome.size.basedOnCufflinks) -> tmp.k4.low
testGeneOverlap(tmp.k4.low) -> tmp.k4.low
print(tmp.k4.low)
newGeneOverlap(hESC.ChIPSeq.list$H3K4me3, hESC.RNASeq.list$"Exp Medium", genome.size.basedOnCufflinks) -> tmp.k4.medium
testGeneOverlap(tmp.k4.medium) -> tmp.k4.medium
print(tmp.k4.medium)
newGOM(hESC.ChIPSeq.list, hESC.RNASeq.list, genome.size.basedOnCufflinks) -> gom.chipseq.rnaseq
gom.chipseq.rnaseq
print(gom.chipseq.rnaseq)
drawHeatmap(gom.chipseq.rnaseq)
library("gplots", lib.loc="/home/lishen/R/x86_64-pc-linux-gnu-library/3.0")
drawHeatmap(gom.chipseq.rnaseq)
library("RColorBrewer", lib.loc="/home/lishen/R/x86_64-pc-linux-gnu-library/3.0")
drawHeatmap(gom.chipseq.rnaseq)
getMatrix(gom.chipseq.rnaseq, "odds.ratio")
getMatrix(gom.chipseq.rnaseq, "intersection")
newGOM(hESC.ChIPSeq.list, genome.size=genome.size.basedOnCufflinks) -> gom.chipseq
drawHeatmap(gom.chipseq)
newGOM(hESC.RNASeq.list, genome.size=genome.size.basedOnCufflinks) -> gom.rnaseq
gom.rnaseq
print(gom.rnaseq)
getNestedList(gom.rnaseq, "intersection") -> tmp.nl
tmp.nl$"Exp Medium"$"Exp High" -> tmp
head(tmp)
subset(rnaseq.genes.coding.fpkm.OK, gene_short_name %in% head(tmp) )
View(subset(rnaseq.genes.coding.fpkm.OK, gene_short_name %in% head(tmp)))
View(subset(rnaseq.genes.coding.fpkm.OK, gene_short_name %in% head(tmp)))
View(subset(rnaseq.genes.coding.fpkm.OK, gene_short_name %in% head(tmp)))
getMatrix(gom.chipseq, "intersection")
getMatrix(gom.rnaseq, "intersection")
head(duplicated(rnaseq.genes.coding.fpkm.OK$gene_id))
sum(duplicated(rnaseq.genes.coding.fpkm.OK$gene_id))
4 + 91 + 56
rnaseq.genes.coding.fpkm.OK$gene_id[duplicated(rnaseq.genes.coding.fpkm.OK$gene_id)] -> dup.gid
head(dup.gid)
subset(rnaseq.genes.coding.fpkm.OK, !(gene_id %in% dup.gid)) -> rnaseq.genes.coding.fpkm.OK2
nrow(rnaseq.genes.coding.fpkm.OK2)
nrow(rnaseq.genes.coding.fpkm.OK)
sum(duplicated(rnaseq.genes.coding.fpkm.OK2$gene_id))
sum(duplicated(rnaseq.genes.coding.fpkm$gene_id))
nrow(rnaseq.genes.coding.fpkm.OK2) -> genome.size.basedOnCufflinks
rnaseq.genes.coding.fpkm.OK2 -> rnaseq.genes.coding.fpkm.OK; rm(rnaseq.genes.coding.fpkm.OK2)
rnaseq.genes.coding.fpkm.OK[rnaseq.genes.coding.fpkm.OK$FPKM > 10, ] -> genes.high
rnaseq.genes.coding.fpkm.OK[rnaseq.genes.coding.fpkm.OK$FPKM > 1 & rnaseq.genes.coding.fpkm.OK$FPKM <= 10, ] -> genes.medium
rnaseq.genes.coding.fpkm.OK[rnaseq.genes.coding.fpkm.OK$FPKM <= 1, ] -> genes.low
hESC.RNASeq.list <- list("Exp High"=genes.high$gene_short_name, "Exp Medium"=genes.medium$gene_short_name, "Exp Low"=genes.low$gene_short_name)
setwd("~/Dump/ENCODE/geneoverlap_data/chipseq")
hESC.ChIPSeq.list <- list(H3K4me3=ChIPSeqList("hesc.H3k4me3.Rep1_peaks.bed.annotated"),
H3K9me3=ChIPSeqList("hesc.H3k9me3.Rep1.sam_peaks.bed.annotated"),
H3K27me3=ChIPSeqList("hesc.H3k27me3.Rep1_peaks.bed.annotated"),
H3K36me3=ChIPSeqList("hesc.H3k36me3.Rep1.sam_peaks.bed.annotated"))
sapply(hESC.ChIPSeq.list, length)
sapply(hESC.RNASeq.list, length)
newGOM(hESC.RNASeq.list, genome.size=genome.size.basedOnCufflinks) -> gom.rnaseq
getMatrix(gom.rnaseq, "intersection")
names(rnaseq.genes.coding.fpkm.OK)
rnaseq.genes.coding.fpkm.OK$gene_short_name[duplicated(rnaseq.genes.coding.fpkm.OK$gene_short_name)] -> dup.gid
subset(rnaseq.genes.coding.fpkm.OK, !(gene_short_name %in% dup.gid)) -> rnaseq.genes.coding.fpkm.OK2
nrow(rnaseq.genes.coding.fpkm.OK2) -> genome.size.basedOnCufflinks
rnaseq.genes.coding.fpkm.OK2 -> rnaseq.genes.coding.fpkm.OK; rm(rnaseq.genes.coding.fpkm.OK2)
rnaseq.genes.coding.fpkm.OK[rnaseq.genes.coding.fpkm.OK$FPKM > 10, ] -> genes.high
rnaseq.genes.coding.fpkm.OK[rnaseq.genes.coding.fpkm.OK$FPKM > 1 & rnaseq.genes.coding.fpkm.OK$FPKM <= 10, ] -> genes.medium
rnaseq.genes.coding.fpkm.OK[rnaseq.genes.coding.fpkm.OK$FPKM <= 1, ] -> genes.low
hESC.RNASeq.list <- list("Exp High"=genes.high$gene_short_name, "Exp Medium"=genes.medium$gene_short_name, "Exp Low"=genes.low$gene_short_name)
sapply(hESC.RNASeq.list, length)
genome.size.basedOnCufflinks
hESC.ChIPSeq.list <- list(H3K4me3=ChIPSeqList("hesc.H3k4me3.Rep1_peaks.bed.annotated"),
H3K9me3=ChIPSeqList("hesc.H3k9me3.Rep1.sam_peaks.bed.annotated"),
H3K27me3=ChIPSeqList("hesc.H3k27me3.Rep1_peaks.bed.annotated"),
H3K36me3=ChIPSeqList("hesc.H3k36me3.Rep1.sam_peaks.bed.annotated"))
newGOM(hESC.RNASeq.list, genome.size=genome.size.basedOnCufflinks) -> gom.rnaseq
getMatrix(gom.rnaseq, "intersection")
drawHeatmap(gom.rnaseq)
drawHeatmap(gom.rnaseq)
getMatrix(gom.rnaseq, "pval")
getMatrix(gom.rnaseq, "odds.ratio")
getMatrix(gom.rnaseq, "union")
save(hESC.RNASeq.list, hESC.ChIPSeq.list, genome.size.basedOnCufflinks, file="data/GeneOverlap.RData")
setwd("~/Dropbox/code/R/GeneOverlap")
save(hESC.RNASeq.list, hESC.ChIPSeq.list, genome.size.basedOnCufflinks, file="data/GeneOverlap.RData")
setwd("~/Dropbox/code/R/GeneOverlap")
library(GeneOverlap)
library(GeneOverlap)
data()
data(hESC.ChIPSeq.list)
data(hESC.ChIPSeq.list, package="GeneOverlap")
data(GeneOverlap)
rm(hESC.ChIPSeq.list, hESC.RNASeq.list, genome.size.basedOnCufflinks)
data(GeneOverlap)
demo(lattice)
demo("lattice")
demo(package="lattice")
demo(lattice, package="lattice")
demo(intervals, package="lattice")
demo(labels, package="lattice")
demo(panel, package="lattice")
demo(lattice, package="lattice")
install.packages("ggplot2")
library("ggplot2", lib.loc="/home/lishen/R/x86_64-pc-linux-gnu-library/3.0")
source("http://bioconductor.org/biocLite.R")
biocLite("BiocStyle")
biocLite("BiocStyle")
source("http://bioconductor.org/biocLite.R")
biocLite("BiocStyle")
library("GeneOverlap", lib.loc="/home/lishen/R/x86_64-pc-linux-gnu-library/3.0")
print(go.obj)
testGeneOverlap(go.obj) -> go.obj
print(go.obj)
print(go.obj)
print(go.obj)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
go.obj <- newGeneOverlap(hESC.ChIPSeq.list$H3K4me3,
hESC.RNASeq.list$"Exp Low",
genome.size=genome.size.basedOnCufflinks)
go.obj <- testGeneOverlap(go.obj)
print(go.obj)
go.obj <- testGeneOverlap(go.obj)
go.obj
v.gs <- c(10e3, 20e3, 40e3, 80e3)
setNames(sapply(v.gs, function(g) {
setGenomeSize(go.obj) <- g
go.obj <- testGeneOverlap(go.obj)
}), v.gs)
go.obj <- testGeneOverlap(go.obj)
go.obj
v.gs <- c(20e3, 40e3, 80e3, 160e3)
setNames(sapply(v.gs, function(g) {
setGenomeSize(go.obj) <- g
go.obj <- testGeneOverlap(go.obj)
}), v.gs)
go.obj <- testGeneOverlap(go.obj)
go.obj
v.gs <- c(20e3, 40e3, 80e3, 160e3)
setNames(sapply(v.gs, function(g) {
setGenomeSize(go.obj) <- g
go.obj <- testGeneOverlap(go.obj)
getPval(go.obj)
}), v.gs)
setListB(go.obj) <- hESC.RNASeq.list$"Exp Medium"
go.obj
class(hESC.RNASeq.list$"Exp Medium")
sapply(hESC.RNASeq.list, class)
sapply(hESC.ChIPSeq.list, class)
lapply(hESC.RNASeq.list, as.character) -> hESC.RNASeq.list
sapply(hESC.RNASeq.list, class)
dir()
dir("data/")
save(hESC.ChIPSeq.list, hESC.RNASeq.list, genome.size.basedOnCufflinks, file="data//GeneOverlap.RData")
setListB(go.obj) <- hESC.RNASeq.list$"Exp Medium"
go.obj
go.obj <- testGeneOverlap(go.obj)
go.obj
v.gs <- c(20e3, 40e3, 80e3, 160e3)
setNames(sapply(v.gs, function(g) {
setGenomeSize(go.obj) <- g
go.obj <- testGeneOverlap(go.obj)
getPval(go.obj)
}), v.gs)
source('~/.active-rstudio-document', echo=TRUE)
library(GeneOverlap)
source('~/.active-rstudio-document', echo=TRUE)
setListA(go.obj) <- hESC.ChIPSeq.list$H3K27me3
setListB(go.obj) <- hESC.RNASeq.list$"Exp Medium"
go.obj
go.obj <- testGeneOverlap(go.obj)
go.obj
v.gs <- c(20e3, 40e3, 80e3, 160e3)
setNames(sapply(v.gs, function(g) {
setGenomeSize(go.obj) <- g
go.obj <- testGeneOverlap(go.obj)
getPval(go.obj)
}), v.gs)
go.obj <- testGeneOverlap(go.obj)
go.obj
v.gs <- c(10e3, 12e3, 14e3, 16e3, 18e3, 20e3)
setNames(sapply(v.gs, function(g) {
setGenomeSize(go.obj) <- g
go.obj <- testGeneOverlap(go.obj)
getPval(go.obj)
}), v.gs)
gom.obj <- newGOM(hESC.ChIPSeq.list, hESC.RNASeq.list,
genome.size.basedOnCufflinks)
drawHeatmap(gom.obj)
library(GeneOverlap)
gom.obj <- newGOM(hESC.ChIPSeq.list, hESC.RNASeq.list,
genome.size.basedOnCufflinks)
drawHeatmap(gom.obj)
library(gplots)
gom.obj <- newGOM(hESC.ChIPSeq.list, hESC.RNASeq.list,
genome.size.basedOnCufflinks)
drawHeatmap(gom.obj)
library(RColorBrewer)
gom.obj <- newGOM(hESC.ChIPSeq.list, hESC.RNASeq.list,
genome.size.basedOnCufflinks)
drawHeatmap(gom.obj)
getMatrix(gom.obj, name="pval")
getMatrix(gom.obj, "odds.ratio")
inter.nl <- getNestedList(gom.obj, name="intersection")
str(inter.nl)
gom.obj["H3K36me3", "Exp High"]
gom.obj["H3K36me3", "Exp Medium"]
gom.obj["H3K9me3", "Exp Medium"]
go.k4.high <- gom.obj[1, 1]
print(go.k4.high)
gom.self <- newGOM(hESC.ChIPSeq.list,
genome.size=genome.size.basedOnCufflinks)
drawHeatmap(gom.self)
library(GeneOverlap)
genome.size.basedOnCufflinks -> gs.RNASeq
save(hESC.ChIPSeq.list, hESC.RNASeq.list, gs.RNASeq, file="data//GeneOverlap.RData")
library(GeneOverlap)
library(GeneOverlap)
library(GeneOverlap)
library(GeneOverlap)
library(GeneOverlap)
library('cacheSweave');rm(list=ls());
source("http://bioconductor.org/biocLite.R")
biocLite("BiocStyle")
?BiocUpgrade
biocLite("BiocUpgrade")
biocLite("BiocStyle")
?BioCUpgrade
?BiocUpgrade
?biocUpgrade
source("http://bioconductor.org/biocLite.R")
?BiocUpgrade
biocLite("BiocUpgrade")
biocLite("BiocStyle")
library("BiocStyle", lib.loc="/home/lishen/R/x86_64-pc-linux-gnu-library/3.0")
library("BiocGenerics", lib.loc="/home/lishen/R/x86_64-pc-linux-gnu-library/3.0")
library("GeneOverlap", lib.loc="/home/lishen/R/x86_64-pc-linux-gnu-library/3.0")
drawHeatmap(gom.self, ncolused=5, grid.col="blue", note.col="black")
data(GeneOverlap)
str(hESC.ChIPSeq.list)
sapply(hESC.ChIPSeq.list, length)
gs.RNASeq
data(GeneOverlap)
go.obj <- newGeneOverlap(hESC.ChIPSeq$H3K4me3,
hESC.ChIPSeq$H3K27me3,
gs.RNASeq)
go.obj <- testGeneOverlap(go.obj)
go.obj  # show.
print(go.obj)  # more details.
getContbl(go.obj)  # contingency table.
data(GeneOverlap)
go.obj <- newGeneOverlap(hESC.ChIPSeq.list$H3K4me3,
hESC.ChIPSeq.list$H3K27me3,
gs.RNASeq)
go.obj <- testGeneOverlap(go.obj)
go.obj  # show.
print(go.obj)  # more details.
getContbl(go.obj)  # contingency table.
data(GeneOverlap)
go.obj <- newGeneOverlap(hESC.ChIPSeq.list$H3K4me3,
hESC.ChIPSeq.list$H3K9me3,
gs.RNASeq)
go.obj <- testGeneOverlap(go.obj)
go.obj  # show.
print(go.obj)  # more details.
getContbl(go.obj)  # contingency table.
data(GeneOverlap)
gom.obj <- newGOM(hESC.ChIPseq.list, hESC.RNASeq.list, gs.RNASeq)
gom.obj
data(GeneOverlap)
gom.obj <- newGOM(hESC.ChIPSeq.list, hESC.RNASeq.list, gs.RNASeq)
gom.obj
print(gom.obj)
drawHeatmap(gom.obj)
data(GeneOverlap)
gom.obj <- newGOM(hESC.ChIPSeq.list, genome.size=gs.RNASeq)
drawHeatmap(gom.obj, adj.p=T, cutoff=.01,
ncolused=5, grid.col="Blues", note.col="black")
drawHeatmap(gom.obj)
drawHeatmap(gom.obj, ncolused=5, grid.col="Blues", note.col="black")
drawHeatmap(gom.obj, ncolused=5, grid.col="Blues", note.col="black", adj.p=T)
drawHeatmap(gom.obj, ncolused=5, grid.col="Blues", note.col="black", cufoff=.01)
drawHeatmap(gom.obj, ncolused=5, grid.col="Blues", note.col="black", cutoff=.01)
tmp <- matrix(1:4, nrow=2)
tmp
tmp.m <- matrix(c(T,T,F,F), nrow=2)
tmp.m
tmp[tmp.m]
tmp[tmp.m] <- c(5,6)
tmp
4:3
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlapMatrix.R', echo=TRUE)
data(GeneOverlap)
gom.obj <- newGOM(hESC.ChIPSeq.list, genome.size=gs.RNASeq)
drawHeatmap(gom.obj, adj.p=T, cutoff=.01,
ncolused=5, grid.col="Blues", note.col="black")
library(GeneOverlap)
data(GeneOverlap)
gom.obj <- newGOM(hESC.ChIPSeq.list, genome.size=gs.RNASeq)
drawHeatmap(gom.obj, adj.p=T, cutoff=.01,
ncolused=5, grid.col="Blues", note.col="black")
library("gplots", lib.loc="/home/lishen/R/x86_64-pc-linux-gnu-library/3.0")
data(GeneOverlap)
gom.obj <- newGOM(hESC.ChIPSeq.list, genome.size=gs.RNASeq)
drawHeatmap(gom.obj, adj.p=T, cutoff=.01,
ncolused=5, grid.col="Blues", note.col="black")
library(GeneOverlap)
library(GeneOverlap)
library(GeneOverlap)
library(GeneOverlap)
data(GeneOverlap)
gom.obj <- newGOM(hESC.ChIPSeq.list, genome.size=gs.RNASeq)
drawHeatmap(gom.obj, adj.p=T, cutoff=.01,
ncolused=5, grid.col="Blues", note.col="black")
drawHeatmap(gom.obj, adj.p=T, cutoff=.01,
ncolused=5, grid.col="Blues", note.col="black")
gom.obj[2, 2]
gom.obj[3, 3]
drawHeatmap(gom.obj, adj.p=T, cutoff=1,
ncolused=5, grid.col="Blues", note.col="black")
drawHeatmap(gom.obj, adj.p=T, cutoff=1,
ncolused=5, grid.col="Blues", note.col="black")
drawHeatmap(gom.obj, adj.p=T, cutoff=.1,
ncolused=5, grid.col="Blues", note.col="black")
drawHeatmap(gom.obj, adj.p=T, cutoff=.1,
ncolused=5, grid.col="Blues", note.col="black")
drawHeatmap(gom.obj, adj.p=T, cutoff=1,
ncolused=5, grid.col="Blues", note.col="black")
getMatrix(gom.obj, "pval")
library(GeneOverlap)
data(GeneOverlap)
gom.obj <- newGOM(hESC.ChIPSeq.list, genome.size=gs.RNASeq)
drawHeatmap(gom.obj, adj.p=T, cutoff=.01,
ncolused=5, grid.col="Blues", note.col="black")
data(GeneOverlap)
gom.obj <- newGOM(hESC.ChIPSeq.list, genome.size=gs.RNASeq)
drawHeatmap(gom.obj, adj.p=T, cutoff=1,
ncolused=5, grid.col="Blues", note.col="black")
data(GeneOverlap)
gom.obj <- newGOM(hESC.ChIPSeq.list, genome.size=gs.RNASeq)
drawHeatmap(gom.obj, adj.p=T, cutoff=2,
ncolused=5, grid.col="Blues", note.col="black")
data(GeneOverlap)
gom.obj <- newGOM(hESC.ChIPSeq.list, genome.size=gs.RNASeq)
drawHeatmap(gom.obj, adj.p=T, cutoff=1,  # show all.
ncolused=5, grid.col="Blues", note.col="black")
toLatex(sessionInfo())
toLatex(sessionInfo())
toLatex(sessionInfo(), locale = FALSE)
data(GeneOverlap)
gom.obj <- newGOM(hESC.ChIPSeq.list, hESC.RNASeq.list, gs.RNASeq)
getMatrix(gom.obj, "odds.ratio")
inter.nl <- getNestedList(gom.obj, "intersection")
str(inter.nl)
go.k4.high <- gom.obj[1, 1]
go.k4.high
go.obj <- newGeneOverlap(hESC.ChIPSeq.list$H3K4me3,
hESC.ChIPSeq.list$H3K27me3,
genome.size=gs.RNASeq)
go.obj <- testGeneOverlap(go.obj)
head(getIntersection(go.obj))
head(getUnion(go.obj))
getTested(go.obj)
getContbl(go.obj)
getPval(go.obj)
getOddsRatio(go.obj)
data(GeneOverlap)
go.obj <- newGeneOverlap(hESC.ChIPSeq.list$H3K4me3,
hESC.ChIPSeq.list$H3K9me3,
gs.RNASeq)
print(go.obj)  # not tested yet.
go.obj <- testGeneOverlap(go.obj)
print(go.obj)
data(GeneOverlap)
go.obj <- newGeneOverlap(hESC.ChIPSeq.list$H3K27me3,
hESC.RNASeq.list$"Exp Medium",
genome.size=gs.RNASeq)
getGenomeSize(go.obj)
v.gs <- c(12e3, 14e3, 16e3, 18e3, 20e3)
setNames(sapply(v.gs, function(g) {
setGenomeSize(go.obj) <- g
go.obj <- testGeneOverlap(go.obj)
getPval(go.obj)
}), v.gs)
data(GeneOverlap)
go.obj <- newGeneOverlap(hESC.ChIPSeq.list$H3K4me3,
hESC.ChIPSeq.list$H3K27me3,
genome.size=gs.RNASeq)
go.obj <- testGeneOverlap(go.obj)
head(getListB(go.obj))
getTested(go.obj)  # true.
setListB(go.obj) <- hESC.ChIPSeq.list$H3K9me3
getTested(go.obj) # false.
data(GeneOverlap)
go.obj <- newGeneOverlap(hESC.ChIPSeq.list$H3K4me3,
hESC.ChIPSeq.list$H3K27me3,
genome.size=gs.RNASeq)
go.obj <- testGeneOverlap(go.obj)
getPval(go.obj)
getOddsRatio(go.obj)
getContbl(go.obj)
print(go.obj)
library(GeneOverlap)
args("[")
args("print")
args(print)
args([)
args([])
args("[")
library(GeneOverlap)
library(GeneOverlap)
library(GeneOverlap)
install.packages("devtools")
getOption("devtools.path")
library(GeneOverlap)
library(GeneOverlap)
