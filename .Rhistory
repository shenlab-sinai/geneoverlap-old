checkException(GeneOverlap("A", "B", spec="speciesdoesnotexist"))
switch("mm9.gene", mm9.gene=23000, hg19.gene=25000, rn4.gene=17000)
source('~/mycode/R/TestPkg/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlap()
source('~/mycode/R/TestPkg/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlap()
c()
identical(NULL, NA)
identical(NULL, NaN)
source('~/mycode/R/TestPkg/GeneOverlap/R/GeneOverlap.R')
test_GeneOverlap()
source('~/mycode/R/TestPkg/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
source('~/mycode/R/TestPkg/GeneOverlap/R/GeneOverlap.R')
source('~/mycode/R/TestPkg/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlap()
source('~/mycode/R/TestPkg/GeneOverlap/R/GeneOverlap.R')
source('~/mycode/R/TestPkg/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlap()
source('~/mycode/R/TestPkg/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlap()
library(GeneOverlap)
library(GeneOverlap)
install.packages("RUnit")
Sys.getenv("PATH")
Sys.getenv("R_HOME")
Sys.getenv("TEXINPUTS")
library("VennDiagram", lib.loc="/home/lishen/R/x86_64-pc-linux-gnu-library/3.0")
draw.pairwise.venn(2, 3, 1)
draw.pairwise.venn(200, 300, 99)
draw.pairwise.venn(200, 300, 50)
draw.pairwise.venn(200, 300, 500)
draw.pairwise.venn(200, 300, 100)
draw.pairwise.venn(200, 300, 100)
draw.pairwise.venn(200, 300, 200)
draw.pairwise.venn(200, 300, 200)
draw.pairwise.venn(200, 300, 150)
source('~/Dropbox/code/R/TestPkg/GeneOverlap/R/GeneOverlap.R')
GeneOverlap(c("A", "B"), c("B", "C")) -> tmp
tmp
summary.GeneOverlap(tmp)
plot(tmp)
source('~/Dropbox/code/R/TestPkg/GeneOverlap/R/GeneOverlap.R')
GeneOverlap(c("A", "B"), c("B", "C")) -> tmp
plot(tmp)
source('~/.active-rstudio-document')
source('~/Dropbox/code/R/TestPkg/GeneOverlap/R/GeneOverlap.R')
plot(tmp)
plot2(tmp)
methods(plot)
source('~/Dropbox/code/R/TestPkg/GeneOverlap/R/GeneOverlap.R')
library(GeneOverlap)
plot2(tmp)
plot2(tmp)
plot(tmp)
tmp1 <- list(A=c(1,2))
tmp2 <- list(A=c(1,2))
tmp3 <- list(B=c(1,2))
identical(tmp1, tmp2)
identical(tmp1, tmp3)
library("RUnit", lib.loc="/home/lishen/R/x86_64-pc-linux-gnu-library/3.0")
source('~/Dropbox/code/R/TestPkg/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
source('~/Dropbox/code/R/TestPkg/GeneOverlap/R/GeneOverlapMatrix.R')
test_GeneOverlapMatrix()
source('~/Dropbox/code/R/TestPkg/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlapMatrix()
source('~/Dropbox/code/R/TestPkg/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlapMatrix()
source('~/Dropbox/code/R/TestPkg/GeneOverlap/R/GeneOverlapMatrix.R')
test_GeneOverlapMatrix()
gs1 <- list(A=c("A"))
gs3 <- list(B=c("B"))
GeneOverlapMatrix(gs1, gs3, genome.size=20e3) -> tmp
tmp
source('~/Dropbox/code/R/TestPkg/GeneOverlap/R/GeneOverlapMatrix.R')
sample.int(100)
sample(1:100, size=20)
lapply(1:2, as.character(sample(1:100, size=20)))
as.character(sample(1:100, size=20))
lapply(1:2, function(x) as.character(sample(1:100, size=20)))
setNames(lapply(1:2, function(x) as.character(sample(1:100, size=20))), c("A1", "A2")
)
setNames(lapply(1:2, function(x) as.character(sample(1:100, size=20))), c("A1", "A2")) -> gsetA
setNames(lapply(1:3, function(x) as.character(sample(1:100, size=20))), c("B1", "B2", "B3")) -> gsetB
source('~/Dropbox/code/R/TestPkg/GeneOverlap/R/GeneOverlapMatrix.R')
GeneOverlapMatrix(gsetA, gsetB, genome.size=100) -> gom.tmp
print(gom.tmp)
summary(gom.tmp)
plot(gom.tmp, cutoff=.1)
plot(gom.tmp, cutoff=.1)
setNames(lapply(1:2, function(x) as.character(sample(1:100, size=50))), c("A1", "A2")) -> gsetA
setNames(lapply(1:3, function(x) as.character(sample(1:100, size=50))), c("B1", "B2", "B3")) -> gsetB
warnings()
GeneOverlapMatrix(gsetA, gsetB, genome.size=100) -> gom.tmp
plot(gom.tmp)
plot(gom.tmp, cutoff=.1)
plot(gom.tmp, cutoff=.2)
plot(gom.tmp, cutoff=.3)
summary(gom.tmp)
library(GeneOverlap)
tbl.tmp <- matrix(c(25,20,20,35), nrow=2)
tbl.tmp
fisher.test(tbl.tmp, alternative="greater")
tbl.tmp <- matrix(c(30,20,20,30), nrow=2)
fisher.test(tbl.tmp, alternative="greater")
dhyper(30:50, 50, 50, 50)
sum(dhyper(30:50, 50, 50, 50))
system.time(sum(dhyper(30:50, 50, 50, 50)))
system.time(sum(dhyper(300:500, 500, 500, 500)))
system.time(sum(dhyper(3000:5000, 5000, 5000, 5000)))
system.time(sum(dhyper(30000:50000, 50000, 50000, 50000)))
tbl.tmp <- matrix(c(30000,20000,20000,30000), nrow=2)
system.time(fisher.test(tbl.tmp, alternative="greater"))
tbl.tmp <- matrix(c(100,60,20,10), nrow=2)
fisher.test(tbl.tmp)
sum(dhyper(10:30, 60, 140, 30))
sum(dhyper(10:30, 60, 140, 70))
sum(dhyper(10:30, 60, 140, 50))
sum(dhyper(10:30, 60, 140, 90:70))
tbl.tmp <- matrix(c(110,60,20,10), nrow=2)
fisher.test(tbl.tmp)
fisher.test(tbl.tmp, alternative="greater")
sum(dhyper(10:30, 70, 130, 30))
sum(dhyper(10:30, 30, 170, 70))
sum(dhyper(10:30, 70, 130, 30))
fisher.test(matrix(c(110, 20, 60, 10, nrow=2)))
fisher.test(matrix(c(110, 20, 60, 10), nrow=2))
fisher.test(matrix(c(110, 20, 60, 10), nrow=2))
fisher.test(matrix(c(110, 20, 60, 10), nrow=2), alternative="greater")
library(GeneOverlap)
library(GeneOverlap)
library(GeneOverlap)
library(GeneOverlap)
library(GeneOverlap)
system.time(sum(dhyper(10e3:30e3, 70e3, 130e3, 30e3)))
system.time(fisher.test(matrix(c(110, 20, 60, 10), nrow=2), alternative="greater"))
system.time(fisher.test(matrix(c(110e3, 20e3, 60e3, 10e3), nrow=2), alternative="greater"))
GeneOverlap(c("A", "B", "C"), c("B", "C", "D"), spec="mm9.gene")
GeneOverlap(c("A", "B", "C"), c("B", "C", "D"), genome.size=10000)
library(GeneOverlap)
go <- GeneOverlap(c("A", "B", "C"), c("B", "C", "D"), spec="mm9.gene")
print(go)
summary(go)
c("a", "b", "c", "a") -> tmp
class(tmp)
as.factor(tmp)
as.factor(tmp) -> tmp2
as.character(tmp2)
unique(as.character(tmp2))
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
args(validity)
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
newGeneOverlap(c("A"), c("B")) -> tmp
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
newGeneOverlap(c("A"), c("B")) -> tmp
tmp
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
getwd()
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
ls()
args(newGeneOverlap)
tmpA <- c("A", "B")
tmpB <- c("B", "C")
tmpgs <- 100
newGeneOverlap(tmpA, tmpB, tmpgs)
tmpgo <- newGeneOverlap(tmpA, tmpB, tmpgs)
testGeneOverlap(tmpgo)
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
tmpgo <- newGeneOverlap(tmpA, tmpB, tmpgs)
testGeneOverlap(tmpgo)
tmpgo
testGeneOverlap(tmpgo) -> tmpgo
tmpgo
class(tmpgo)
tmpgo <- newGeneOverlap(tmpA, tmpB, tmpgs)
class(tmpgo)
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
tmpgo <- newGeneOverlap(tmpA, tmpB, tmpgs)
testGeneOverlap(tmpgo)
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
testGeneOverlap(newGeneOverlap(tmpA, tmpB, tmpgs))
"A":"C"
LETTERS
sample(LETTERS, size=10)
LETTERS[1:10]
LETTERS[1:10] -> tmpA
LETTERS[2:15] -> tmpB
tmpgs <- 50
testGeneOverlap(newGeneOverlap(tmpA, tmpB, tmpgs))
args(show)
args(print)
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
matrix()
matrix(0)
length(matrix())
as.matrix(vector(0))
as.matrix(vector())
newGeneOverlap("A", "B") -> tmp4
tmp4@cont.tbl
class(tmp4@cont.tbl)
as.matrix()
as.matrix(NULL)
matrix(NULL)
rm(tmp4)
class(tmp4) <- "matrix"
tmp4 <- NULL
class(tmp4) <- "matrix"
vector()
matrix(vector())
newGeneOverlap("A", "B") -> tmp4
identical(matrix(vector()), tmp4$cont.tbl)
identical(matrix(vector()), tmp4@cont.tbl)
dim(matrix(vector()))
dim(tmp4@cont.tbl)
matrix(nrow=0, ncol=0)
head(c("A", "B", "C"))
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
tmpa
tmpA
tmpB
tmp.go <- newGeneOverlap(tmpA, tmpB, genome.size=50)
tmp.go
print(tmp.go)
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
tmp.go <- newGeneOverlap(tmpA, tmpB, genome.size=50)
print(tmp.go)
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
tmp.go <- newGeneOverlap(tmpA, tmpB, genome.size=50)
print(tmp.go)
testGeneOverlap(tmp.go) -> tmp.go
tmp.go
print(tmp.go)
tmp.go <- newGeneOverlap(tmpA, tmpB, genome.size=50)
print(tmp.go)
testGeneOverlap(tmp.go) -> tmp.go
print(tmp.go)
tmp.go
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
tmp.go <- newGeneOverlap(tmpA, tmpB, genome.size=50)
testGeneOverlap(tmp.go) -> tmp.go
tmp.go
print(tmp.go)
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
tmp.go <- newGeneOverlap(tmpA, tmpB, genome.size=50)
testGeneOverlap(tmp.go) -> tmp.go
tmp.go
setGenomeSize(tmp.go) <- 10
setGenomeSize(tmp.go) <- as.integer(10)
class(10)
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
tmp.go <- newGeneOverlap(tmpA, tmpB, genome.size=50)
setGenomeSize(tmp.go) <- 10
tmp.go <- testGeneOverlap(tmp.go)
tmp.go
setGenomeSize(tmp.go) <- 100
tmp.go
tmp.newgo <- newGeneOverlap(c("A", "B"), c("B", "C"), genome.size=10)
tmp.newgo <- testGeneOverlap(tmp.newgo)
print(tmp.newgo)
fisher.test(matrix(c(7,1,1,1), nrow=2), alternative="greater") -> tmp.res
tmp.res
tmp.res$p.value
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
library("RUnit", lib.loc="/home/lishen/R/x86_64-pc-linux-gnu-library/3.0")
fisher.test(matrix(c(6,2,2,0)))
fisher.test(matrix(c(6,2,2,0), nrow=2))
fisher.test(matrix(c(6,2,2,0), nrow=2), alternative="greater")
library("RUnit", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
fisher.test(matrix(c(100-26, 0, 0, 26), nrow=2))
fisher.test(matrix(c(100-26, 0, 0, 26), nrow=2), alternative="greater")
fisher.test(matrix(c(1000-26, 0, 0, 26), nrow=2), alternative="greater")
fisher.test(matrix(c(10000-26, 0, 0, 26), nrow=2), alternative="greater")
fisher.test(matrix(c(100000-26, 0, 0, 26), nrow=2), alternative="greater")
fisher.test(matrix(c(100000-26, 0, 0, 26), nrow=2), alternative="greater")$p.value
.Machine$double.eps^0.5
source('~/Dropbox/code/R/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
source('~/Dropbox/code/R/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlap()
source('~/Dropbox/code/R/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlap()
source('~/Dropbox/code/R/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlap()
source('~/Dropbox/code/R/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlap()
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
test_GeneOverlap()
source('~/Dropbox/code/R/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlap()
unique(as.character(NaN))
unique(as.character(NA))
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
source('~/Dropbox/code/R/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlap()
source('~/Dropbox/code/R/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlap()
is.na(NULL)
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
test_GeneOverlap()
!is.null(NULL)
!is.null(NULL) && is.na(NULL)
if(!is.null(NULL) && is.na(NULL)) { cat("hello\n")}
if(!is.null(NULL) && is.na(NULL)) { print("hello") }
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
source('~/Dropbox/code/R/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlap()
testGeneOverlap(newGeneOverlap("A", NULL, genome.size=10))
newGeneOverlap("A", NULL, genome.size=10)
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
newGeneOverlap("A", NULL, genome.size=10)
!is.null(NULL)
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
test_GeneOverlap()
install.packages("knitr")
source("http://bioconductor.org/biocLite.R")
biocLite("DESeq")
listA <- c("A", "B", "C")
listB <- c("B", "C", "D")
go.obj <- newGeneOverlap(listA, listB, genome.size=10)
go.obj <- testGeneOverlap(go.obj)
go.obj  # show.
print(go.obj)  # more details.
getContbl(go.obj)  # contingency table.
class(go.obj)
go.obj
show(go.obj)
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
listA <- c("A", "B", "C")
listB <- c("B", "C", "D")
go.obj <- newGeneOverlap(listA, listB, genome.size=10)
go.obj <- testGeneOverlap(go.obj)
go.obj  # show.
listA <- c("A", "B", "C")
listB <- c("B", "C", "D")
go.obj <- newGeneOverlap(listA, listB, genome.size=10)
go.obj <- testGeneOverlap(go.obj)
go.obj  # show.
print(go.obj)  # more details.
getContbl(go.obj)  # contingency table.
getwd()
source('~/Dropbox/code/R/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
test_GeneOverlap()
library("RUnit", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
test_GeneOverlap()
RShowDoc("KEYWORDS")
listA <- c("A", "B", "C")
listB <- c("B", "C", "D")
go.obj <- newGeneOverlap(listA, listB, genome.size=10)
go.obj <- testGeneOverlap(go.obj)
getListB(go.obj)
getTested(go.obj)  # true.
setListB(go.obj) <- c("C", "D", "E")
getTested(go.obj) # false.
go.obj <- testGeneOverlap(go.obj)
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
listA <- c("A", "B", "C")
listB <- c("B", "C", "D")
go.obj <- newGeneOverlap(listA, listB, genome.size=10)
go.obj <- testGeneOverlap(go.obj)
getListB(go.obj)
getTested(go.obj)  # true.
setListB(go.obj) <- c("C", "D", "E")
getTested(go.obj) # false.
go.obj <- testGeneOverlap(go.obj)
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
listA <- c("A", "B", "C")
listB <- c("B", "C", "D")
go.obj <- newGeneOverlap(listA, listB, genome.size=10)
go.obj <- testGeneOverlap(go.obj)
getListB(go.obj)
getTested(go.obj)  # true.
setListB(go.obj) <- c("C", "D", "E")
getTested(go.obj) # false.
go.obj <- testGeneOverlap(go.obj)
print(go.obj)
listA <- c("A", "B", "C")
listB <- c("B", "C", "D")
go.obj <- newGeneOverlap(listA, listB, genome.size=10)
go.obj <- testGeneOverlap(go.obj)
getPval(go.obj)
setGenomeSize(go.obj) <- 20
getPval(go.obj)  # NA.
# See how changing the genome size will affect the p-value.
v.gs <- c(10, 100, 1000, 10e3, 100e3)
v.gs <- setNames(v.gs, as.character(v.gs))
sapply(v.gs, function(x) {
setGenomeSize(go.obj) <- x
getPval(testGeneOverlap(go.obj))
})
list()
length(list())
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlapMatrix.R')
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlapMatrix.R')
fix(GeneOverlap)
rm(ExtractAsMatrix, GeneOverlap, GeneOverlapMatrix)
rm(plot.GeneOverlap, plot.GeneOverlapMatrix)
rm(plot2, plot2.GeneOverlap, print.GeneOverlap, print.GeneOverlapMatrix)
rm(summary.GeneOverlap, summary.GeneOverlapMatrix)
rm(print.summary.GeneOverlap, print.summary.GeneOverlapMatrix)
gsetA
gsetB
tmp.gom <- newGOM(gsetA, gsetB, 1000)
class(tmp.gom)
tmp.m.p <- getMatrix(tmp.gom, "pval")
View(tmp.m.p)
tmp.m.p
tmp.m.p <- getMatrix(tmp.gom, "something")
tmp.m.or <- getMatrix(tmp.gom, "odds.ratio")
tmp.m.or
tmp.m.inter <- getMatrix(tmp.gom, "intersection")
tmp.m.inter
tmp.m.uni <- getMatrix(tmp.gom, "union")
tmp.m.uni
getNestedList(tmp.gom, "intersection") -> tmp.nl.inter
class(tmp.nl.inter)
names(tmp.nl.inter)
str(tmp.nl.inter)
View(tmp.m.inter)
getNestedList(tmp.gom, "union") -> tmp.nl.uni
str(tmp.nl.uni)
View(tmp.m.uni)
getNestedList(tmp.gom, "cont.tbl") -> tmp.nl.contbl
str(tmp.nl.contbl)
tmp.nl.contbl$B1$A1
args(drawHeatmap)
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlapMatrix.R')
library("gplots", lib.loc="/home/lishen/R/x86_64-pc-linux-gnu-library/3.0")
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlapMatrix.R')
ls()
tmp.gom <- newGOM(gsetA, gsetB, 1000)
drawHeatmap(object=tmp.gom)
library("RColorBrewer", lib.loc="/home/lishen/R/x86_64-pc-linux-gnu-library/3.0")
drawHeatmap(object=tmp.gom)
args("[")
args("drawHeatmap")
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlapMatrix.R')
tmp.gom <- newGOM(gsetA, gsetB, 1000)
tmp.gom[1, 1]
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlapMatrix.R')
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlapMatrix.R')
tmp.gom <- newGOM(gsetA, gsetB, 1000)
tmp.gom[1, 1]
tmp.gom[1, 1] -> tmp.go
tmp.go
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
tmp.go
print(tmp.go)
is.numeric(1:2)
is.numeric(3:10)
tmp.gom[2,2]
tmp.gom[3,2]
tmp.gom["A1",2]
tmp.gom[1:2, 1]
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlapMatrix.R')
tmp.gom <- newGOM(gsetA, gsetB, 1000)
tmp.gom
print(tmp.gom)
getSelfCompare(tmp.gom)
tmp.gom[1, 1]
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
tmp.gom[1, 1]
getIntersection(tmp.gom[1, 1])
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlapMatrix.R')
source('~/Dropbox/code/R/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
library("RUnit", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
test_GeneOverlap()
source('~/Dropbox/code/R/GeneOverlap/R/GeneOverlap.R')
test_GeneOverlap()
source('~/Dropbox/code/R/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlap()
source('~/Dropbox/code/R/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlap()
source('~/Dropbox/code/R/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlap()
getNestedList(tmp.gom, "intersection")
getNestedList(tmp.gom, "intersection")[[1]]
getNestedList(tmp.gom, "intersection")[[1]][[1]]
source('~/Dropbox/code/R/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlapMatrix()
source('~/Dropbox/code/R/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlapMatrix()
source('~/Dropbox/code/R/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlapMatrix()
source('~/Dropbox/code/R/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlapMatrix()
gom.obj
gv1 <- c("A", "B")
gv2 <- c("B", "C")
manual.contbl <- matrix(c(7, 1, 1, 1), nrow=2)
fish.res <- fisher.test(manual.contbl, alternative="greater")
gsetA <- list(A=gv1)
gsetB <- list(B=gv2)
gom.obj <- newGOM(gsetA, gsetB, genome.size=10)
gom.obj
gom.obj[1, 1]
go.obj <- newGeneOverlap(gv1, gv2, genome.size=10)
go.obj
source('~/Dropbox/code/R/GeneOverlap/inst/unitTests/test_AllGeneOverlapMethods.R')
test_GeneOverlapMatrix()
